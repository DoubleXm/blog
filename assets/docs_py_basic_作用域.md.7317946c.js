import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.45bffcbf.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/py/basic/作用域.md","lastUpdated":1693462207000}'),e={name:"docs/py/basic/作用域.md"},o=[l('<h2 id="名称空间、作用域" tabindex="-1">名称空间、作用域 <a class="header-anchor" href="#名称空间、作用域" aria-label="Permalink to &quot;名称空间、作用域&quot;">​</a></h2><p>名称空间是管理变量、函数、类等名称 在 python 中名称空间分为四种。简单概括为:</p><ul><li>L: <code>local</code> 存储在函数调用时创建的局部符号表中。它具有优先级最高的作用域。</li><li>E: <code>Enclosing</code> 闭包函数外的命名空间</li><li>G: <code>global</code> 环境下的名称空间</li><li>B: <code>Build-in</code> 内置环境下的名称空间, 其实就是内置方法比如 <code>input</code>, <code>print</code>...</li></ul><p>在查询变量的时候会根据这个 LEGB 的规则查询，形成了变量访问的作用域范围。访问的优先级也为 <code>L -&gt; E -&gt; G -&gt; B</code>, 反之可以访问的范围则是从大到小。</p><div class="language-py line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># ----- global</span></span>\n<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">outer</span><span style="color:#89DDFF;">():</span></span>\n<span class="line"><span style="color:#A6ACCD;">    x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># ----- enclosing</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inner</span><span style="color:#89DDFF;">():</span></span>\n<span class="line"><span style="color:#A6ACCD;">        x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">30</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># ----- local</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">local</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> x</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">enclosing</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> x</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> inner</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">global</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> x</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#82AAFF;">outer</span><span style="color:#89DDFF;">()()</span></span>\n<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h2><p>借用学习前端的思想来描述闭包，就是在内部函数中引用了外部函数的变量，延长了这个变量的生命周期（因为一直会被内层函数引用，所以并不会销毁）</p><p>只要内部函数有用到外部的变量就可以被称之为是闭包</p><div class="language-py line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">outer</span><span style="color:#89DDFF;">():</span></span>\n<span class="line"><span style="color:#A6ACCD;">    x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inner</span><span style="color:#89DDFF;">():</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">nonlocal</span><span style="color:#A6ACCD;"> x</span></span>\n<span class="line"><span style="color:#A6ACCD;">        x </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> inner</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">ret </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">outer</span><span style="color:#89DDFF;">()</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 可以看出 outer 中的 x 一直没有被释放，如果不使用闭包，每次调用后就在内存中将变量释放，不会出现这种累加的情况</span></span>\n<span class="line"><span style="color:#82AAFF;">ret</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 20</span></span>\n<span class="line"><span style="color:#82AAFF;">ret</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 30</span></span>\n<span class="line"><span style="color:#82AAFF;">ret</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 40</span></span>\n<span class="line"><span style="color:#82AAFF;">ret</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 50</span></span>\n<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="nonlcal-global-关键字" tabindex="-1">nonlcal global 关键字 <a class="header-anchor" href="#nonlcal-global-关键字" aria-label="Permalink to &quot;nonlcal global 关键字&quot;">​</a></h2><p>一般场景下如果在函数的内部是不能直接修改 <code>global</code> 作用域下的变量的, 除非你做了 <code>global</code> 声明。</p><div class="language-py line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span>\n<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">outer</span><span style="color:#89DDFF;">():</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># x = 20 如果直接修改, 最后打印仍然是 10</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">global</span><span style="color:#A6ACCD;"> x </span><span style="color:#676E95;font-style:italic;"># 声明一下 x 是来自于全局的 x</span></span>\n<span class="line"><span style="color:#A6ACCD;">    x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">outer</span><span style="color:#89DDFF;">()</span></span>\n<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 20</span></span>\n<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>nonlocal</code> 则是想要在内部函数修改外部函数中变量使需要做的声明</p><div class="language-py line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">outer</span><span style="color:#89DDFF;">():</span></span>\n<span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span>\n<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inner</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># x = 20 直接修改, 最后打印仍然是 10</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">nonlocal</span><span style="color:#A6ACCD;"> x </span><span style="color:#676E95;font-style:italic;"># 声明一下 x 是来自 enclosing 中的 x</span></span>\n<span class="line"><span style="color:#A6ACCD;">        x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">inner</span><span style="color:#89DDFF;">()</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 20</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">outer</span><span style="color:#89DDFF;">()</span></span>\n<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',14)];const c=s(e,[["render",function(s,l,p,e,c,r){return n(),a("div",null,o)}]]);export{p as __pageData,c as default};
