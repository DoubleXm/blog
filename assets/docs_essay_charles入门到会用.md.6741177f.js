import{_ as e,o,c as a,Q as r}from"./chunks/framework.45bffcbf.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/essay/charles入门到会用.md","lastUpdated":1697081673000}'),s={name:"docs/essay/charles入门到会用.md"},d=[r('<h2 id="介绍、安装及破解" tabindex="-1">介绍、安装及破解 <a class="header-anchor" href="#介绍、安装及破解" aria-label="Permalink to &quot;介绍、安装及破解&quot;">​</a></h2><p><code>Charles</code> 是 <code>http</code> 代理工具。可以监控机器与互联网通信的过程，拿到其通信数据。在移动端的开发及测试领域尝尝能看到它的身影。<a href="https://www.charlesproxy.com/download/" target="_blank" rel="noreferrer">安装地址</a></p><p><strong>注：后续所有内容均以 mac 系统为例</strong></p><p>需要注意的是 <code>Charles</code> 是付费软件，下载后可免费使用 30 天。<a href="https://www.charlesproxy.com/buy/" target="_blank" rel="noreferrer">付费地址</a></p><p>如果你囊中羞涩，可以考虑使用破解版。<a href="https://www.zzzmode.com/mytools/charles/" target="_blank" rel="noreferrer">破解地址</a></p><p>破解方式为：导航栏中 <code>Help -&gt; Registered to charles</code> 输入对应的内容即出现如下提示，告诉你注册成功，关闭重新启动一下。</p><p><img src="/blog/essay/charles1.png" alt="charles1"></p><h2 id="ssl-配置与证书安装" tabindex="-1">SSL 配置与证书安装 <a class="header-anchor" href="#ssl-配置与证书安装" aria-label="Permalink to &quot;SSL 配置与证书安装&quot;">​</a></h2><p>默认情况下 <code>Charles</code> 之后拦截 <code>http</code> 的请求，对于加密请求无法进行拦截。这时就需要<strong>修改 <code>Charles</code>的配置以及添加证书</strong>让其对加密请求进行支持。</p><h3 id="ssl-配置" tabindex="-1">SSL 配置 <a class="header-anchor" href="#ssl-配置" aria-label="Permalink to &quot;SSL 配置&quot;">​</a></h3><p>配置 <code>Proxy</code> 分为三步</p><ul><li>导航栏中 <code>Proxy -&gt; SSL Proxy Settings</code> 增加如下配置；配置 <code>SSL</code> 相关的内容。</li></ul><p><img src="/blog/essay/charles2.jpg" alt="charles2"></p><ul><li>导航栏中 <code>Proxy -&gt; Proxy Settings</code> 增加如下配置；配置关于协议的内容。</li></ul><p><img src="/blog/essay/charles3.jpg" alt="charles3"></p><ul><li>导航栏中 <code>Proxy -&gt; Recording Settings</code> 增加如下配置；只有匹配下面的内容才会被记录在 <code>Charles</code> 中。</li></ul><p><img src="/blog/essay/charles4.jpg" alt="charles4"></p><h3 id="证书安装" tabindex="-1">证书安装 <a class="header-anchor" href="#证书安装" aria-label="Permalink to &quot;证书安装&quot;">​</a></h3><p>导航栏中 <code>Help -&gt; SSL Proxying -&gt; Install Charles Root Certificate</code> 点击后会弹出钥匙串，在钥匙串中搜索 <code>Charles Proxy CA</code> 点击证书选择使用信任。</p><h2 id="chrome-抓包" tabindex="-1">Chrome 抓包 <a class="header-anchor" href="#chrome-抓包" aria-label="Permalink to &quot;Chrome 抓包&quot;">​</a></h2><p><code>Chrome</code> 需要安装 <code>SwitchyOmega</code> 插件。<a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif/related?hl=zh-CN" target="_blank" rel="noreferrer">插件地址</a></p><p><code>SwitchyOmega</code> 可以帮助用户管理和切换代理。具体使用方法不在本文中赘述，只演示如何配置及关键性操作。</p><p>新增名为 <code>Charles</code> 的情景模式，并配置如下内容：</p><p><img src="/blog/essay/charles5.jpg" alt="charles5"></p><p>在 <code>auto switch</code> 中添加条件，并且将情景模式选择为 <code>Charles</code>，然后点击应用选项。具体效果如下：</p><p><img src="/blog/essay/charles6.jpg" alt="charles6"></p><p>最后开启插件启用规则 <code>Charles</code> 或 <code>auto switch</code> 再开启抓包工具即可完成浏览器的抓包。具体效果如下：</p><p><img src="/blog/essay/charles7.jpg" alt="charles7"></p><h2 id="mobile-抓包" tabindex="-1">Mobile 抓包 <a class="header-anchor" href="#mobile-抓包" aria-label="Permalink to &quot;Mobile 抓包&quot;">​</a></h2><p>移动端的抓包整体需要两步配置：</p><ul><li>移动端需要安装证书</li><li>保证 <code>PC</code> 与 <code>Mobile</code> 处于同一网段下（连接同一个 <code>WIFI</code>）</li></ul><h3 id="android" tabindex="-1">Android <a class="header-anchor" href="#android" aria-label="Permalink to &quot;Android&quot;">​</a></h3><p><code>Android 7.0</code> 之后 <code>Google</code> 推出了更加严格的安全机制，默认不信任用户的安装的证书，这也导致了对于 <code>https</code> 加密的请求，不再可以抓取了。</p><p>解决方案主流的大致分为两种：</p><ul><li>既然不支持用户的 <code>CA</code> 证书，可以安装系统级别 <code>CA</code> 证书，但前提设备必须为 <code>root</code> 模式。</li><li>如果是自己公司研发的产品可以在 <code>AndroidManifest</code> 中配置 <code>networkSecurityConfig</code> 具体不再这里演示。</li></ul><p>以小米手机为例进行抓包配置，示例如下：</p><p><img src="/blog/essay/charles8.jpg" alt="charles8"></p><p>打开手机浏览器输入 <code>chls.pro/ssl</code> 即会下载 <code>CA</code> 证书，下载完成后进行安装即可。</p><p>如果手机浏览器失败可以尝试使用 <code>PC</code> 重复次操作即会得到 <code>charles-proxy-ssl-proxying-certificate.pem</code> 证书，将此证书传入手机进行安装即可。</p><h3 id="iphone" tabindex="-1">iPhone <a class="header-anchor" href="#iphone" aria-label="Permalink to &quot;iPhone&quot;">​</a></h3><p><code>iPhone</code> 的抓包与 <code>android</code> 基本类似，打开 <code>Charles</code> 保存在同一局域网下，先设置手机的代理，具体配置如下：</p><p><img src="/blog/essay/charles9.jpg" alt="charles9"></p><p><code>Safari</code> 中输入内容 <code>chls.pro/ssl</code> 下载安装证书，最后在关于本机中信任此证书即可。</p><h2 id="模拟网络延迟-弱网测试" tabindex="-1">模拟网络延迟（弱网测试） <a class="header-anchor" href="#模拟网络延迟-弱网测试" aria-label="Permalink to &quot;模拟网络延迟（弱网测试）&quot;">​</a></h2><p>导航栏中 <code>Throttle Settings</code> 点击后出现窗口，开启后使用预设配置或者自定义配置，点击 <code>ok</code> 即开启网络模拟。具体效果如下：</p><p><img src="/blog/essay/charles10.jpg" alt="charles10"></p><h2 id="篡改请求信息" tabindex="-1">篡改请求信息 <a class="header-anchor" href="#篡改请求信息" aria-label="Permalink to &quot;篡改请求信息&quot;">​</a></h2><p>修改请求的方式分为三种，<code>Compose</code>、<code>Rewrite</code>、<code>BreakPoint</code></p><h3 id="compose" tabindex="-1">Compose <a class="header-anchor" href="#compose" aria-label="Permalink to &quot;Compose&quot;">​</a></h3><p>该方法只能只能修改 <code>url</code>、<code>method</code>、<code>params</code>。作用域仅限于 <code>Charles</code> 中，修改后即会重新发送一个请求，用来验证结果。</p><p>选中指定的请求，右键 <code>-&gt; Compose</code>，具体使用及效果如下：</p><p><img src="/blog/essay/charles11.jpg" alt="charles11"></p><h3 id="rewrite" tabindex="-1">Rewrite <a class="header-anchor" href="#rewrite" aria-label="Permalink to &quot;Rewrite&quot;">​</a></h3><p>该方法除了 <code>Request Body</code> 不能修改，其余都支持修改。该配置开启后，后续被代理宿主机的任何请求只要符合该条件都会被修改。</p><p>导航栏 <code>Tools -&gt; Rewrite Settings</code>，配置窗口如下：</p><p><img src="/blog/essay/charles12.jpg" alt="charles12"><img src="/blog/essay/charles13.jpg" alt="charles13"><img src="/blog/essay/charles14.jpg" alt="charles14"></p><h3 id="breakpoint" tabindex="-1">BreakPoint <a class="header-anchor" href="#breakpoint" aria-label="Permalink to &quot;BreakPoint&quot;">​</a></h3><p>该方法值比较主流的修改请求方案，效果为拦截请求的响应，当你修改后再去给请求放行，不过页面有可能因为请求一直得不到回复导致崩溃。</p><p>选中指定请求，右键 <code>-&gt; Breakpoints</code> 即开启断点，每次经过这个请求就会进行拦截。关闭断点的方式则需要点击 <strong>工具栏中的六边形</strong> 效果如下：</p><p><img src="/blog/essay/charles15.jpg" alt="charles15"></p><p>一个 <code>http</code> 请求共需要放行四次，分别为 <code>Request Header</code>、<code>Request Body</code>、<code>Response Header</code>、<code>Response Body</code>；内容可以直接进行修改。</p><p><strong>注意：</strong> 直接右键是严格匹配的断点，如果请求每次参数都会变化，很可能会导致无法命中断点。在导航栏 <code>Proxy -&gt; Breakpoints Settings</code> 中可以针对断点进行配置。</p><p><img src="/blog/essay/charles16.jpg" alt="charles16"></p>',63)];const l=e(s,[["render",function(e,r,c,s,l,t){return o(),a("div",null,d)}]]);export{c as __pageData,l as default};
