import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.BPQUDke-.js";const b=JSON.parse('{"title":"类","description":"","frontmatter":{"outline":[2,3,4]},"headers":[],"relativePath":"python/06.md","filePath":"python/06.md","lastUpdated":1740476554000}'),e={name:"python/06.md"};function o(c,s,r,t,E,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h1><p>类提供了数据和功能绑定在一起的方法，创建类即创建新的对象，对象是类的实例。实例可以维护自己的状态，通过方法改变状态。有点类似于带有 <code>nonlocal</code> 的函数，通过闭包维护内部的变量。</p><h3 id="类的定义与实例化" tabindex="-1">类的定义与实例化 <a class="header-anchor" href="#类的定义与实例化" aria-label="Permalink to &quot;类的定义与实例化&quot;">​</a></h3><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> MyClass</span><span style="color:#E6E6E6;">:</span></span>
<span class="line"><span style="color:#569CD6;">    def</span><span style="color:#DCDCAA;"> __init__</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">name</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#E6E6E6;">):</span></span>
<span class="line"><span style="color:#569CD6;">        self</span><span style="color:#E6E6E6;">.name </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> name</span></span>
<span class="line"><span style="color:#569CD6;">        self</span><span style="color:#E6E6E6;">.age </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> age</span></span>
<span class="line"><span style="color:#569CD6;">        self</span><span style="color:#E6E6E6;">.gender </span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;"> &#39;male&#39;</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span></span>
<span class="line"><span style="color:#569CD6;">    def</span><span style="color:#DCDCAA;"> say_hello</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#E6E6E6;">):</span></span>
<span class="line"><span style="color:#DCDCAA;">        print</span><span style="color:#E6E6E6;">(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&#39;Hello, my name is </span><span style="color:#569CD6;">{self</span><span style="color:#E6E6E6;">.name</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;"> and I am </span><span style="color:#569CD6;">{self</span><span style="color:#E6E6E6;">.age</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;"> years old.&#39;</span><span style="color:#E6E6E6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    def</span><span style="color:#DCDCAA;"> say</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#E6E6E6;">):</span></span>
<span class="line"><span style="color:#569CD6;">        self</span><span style="color:#E6E6E6;">.say_hello()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>类里面的 <code>def</code> 称之为方法，方法的第一个参数是 <code>self</code>，表示实例本身。</p><p><code>__init__</code> 是类的构造函数，在创建实例时自动调用。构造函数的参数需要再实例化的过程中进行传递。在构造函数中也可以对实例的属性进行初始化。</p><p>实例化类时，需要使用 <code>类名()</code> 的方式，在括号中传递构造函数的参数。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E6E6E6;">my_instance </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> MyClass(</span><span style="color:#CE9178;">&#39;Alice&#39;</span><span style="color:#E6E6E6;">, </span><span style="color:#B5CEA8;">25</span><span style="color:#E6E6E6;">)</span></span>
<span class="line"><span style="color:#E6E6E6;">my_instance.say_hello()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="类变量" tabindex="-1">类变量 <a class="header-anchor" href="#类变量" aria-label="Permalink to &quot;类变量&quot;">​</a></h3><p>类变量是类中定义的变量，可以通过类名直接访问，也可以通过实例访问。类变量在所有的实例中共享。如果是复杂数据类型可能出现意外的修改。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> MyClass</span><span style="color:#E6E6E6;">:</span></span>
<span class="line"><span style="color:#E6E6E6;">    class_variable </span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;"> &#39;class variable&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">my_class </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> MyClass()</span></span>
<span class="line"><span style="color:#DCDCAA;">print</span><span style="color:#E6E6E6;">(my_class.class_variable </span><span style="color:#D4D4D4;">==</span><span style="color:#E6E6E6;"> MyClass.class_variable) </span><span style="color:#6A9955;"># True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Basic</span><span style="color:#E6E6E6;">:</span></span>
<span class="line"><span style="color:#E6E6E6;">    class_list </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    def</span><span style="color:#DCDCAA;"> add_item</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#E6E6E6;">):</span></span>
<span class="line"><span style="color:#569CD6;">        self</span><span style="color:#E6E6E6;">.class_list.append(</span><span style="color:#CE9178;">&#39;item&#39;</span><span style="color:#E6E6E6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">a </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> Basic()</span></span>
<span class="line"><span style="color:#E6E6E6;">b </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> Basic()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">a.add_item()</span></span>
<span class="line"><span style="color:#DCDCAA;">print</span><span style="color:#E6E6E6;">(a.class_list) </span><span style="color:#6A9955;"># [&#39;item&#39;]</span></span>
<span class="line"><span style="color:#DCDCAA;">print</span><span style="color:#E6E6E6;">(b.class_list) </span><span style="color:#6A9955;"># [&#39;item&#39;] # 意外的修改了 b 实例的 class_list</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h3><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Base</span><span style="color:#E6E6E6;">:</span></span>
<span class="line"><span style="color:#569CD6;">    def</span><span style="color:#DCDCAA;"> __init__</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">name</span><span style="color:#E6E6E6;">):</span></span>
<span class="line"><span style="color:#569CD6;">        self</span><span style="color:#E6E6E6;">.name </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> name</span></span>
<span class="line"><span style="color:#E6E6E6;">        </span></span>
<span class="line"><span style="color:#569CD6;">    def</span><span style="color:#DCDCAA;"> get_user_details</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#E6E6E6;">):</span></span>
<span class="line"><span style="color:#DCDCAA;">        print</span><span style="color:#E6E6E6;">(</span><span style="color:#569CD6;">self</span><span style="color:#E6E6E6;">.name)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Child</span><span style="color:#E6E6E6;">(</span><span style="color:#4EC9B0;">Base</span><span style="color:#E6E6E6;">):</span></span>
<span class="line"><span style="color:#569CD6;">    def</span><span style="color:#DCDCAA;"> __init__</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">name</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#E6E6E6;">):</span></span>
<span class="line"><span style="color:#4EC9B0;">        super</span><span style="color:#E6E6E6;">().</span><span style="color:#DCDCAA;">__init__</span><span style="color:#E6E6E6;">(name)</span></span>
<span class="line"><span style="color:#569CD6;">        self</span><span style="color:#E6E6E6;">.age </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> age</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    def</span><span style="color:#DCDCAA;"> get_user_details</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#E6E6E6;">):</span></span>
<span class="line"><span style="color:#4EC9B0;">        super</span><span style="color:#E6E6E6;">().get_user_details()</span></span>
<span class="line"><span style="color:#DCDCAA;">        print</span><span style="color:#E6E6E6;">(</span><span style="color:#569CD6;">self</span><span style="color:#E6E6E6;">.age)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    def</span><span style="color:#DCDCAA;"> say_hello</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#E6E6E6;">):</span></span>
<span class="line"><span style="color:#DCDCAA;">        print</span><span style="color:#E6E6E6;">(</span><span style="color:#CE9178;">&#39;Hello, my name is&#39;</span><span style="color:#E6E6E6;">, </span><span style="color:#569CD6;">self</span><span style="color:#E6E6E6;">.name)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">child </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> Child(</span><span style="color:#CE9178;">&#39;John&#39;</span><span style="color:#E6E6E6;">, </span><span style="color:#B5CEA8;">25</span><span style="color:#E6E6E6;">)</span></span>
<span class="line"><span style="color:#E6E6E6;">child.get_user_details()</span></span>
<span class="line"><span style="color:#E6E6E6;">child.say_hello()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><ul><li>父类有的方法，子类没有的情况下，子类实例可以直接调用，类中进行调用需要使用 <code>super()</code> 调用父类的方法。</li><li>子类可以重写父类的方法，也可以调用父类的方法。</li><li>子类可以添加新的方法，也可以重写父类（同样的方法名）的方法。</li><li>子类可以添加新的属性，也可以重写父类的属性。（不推荐）</li></ul><h3 id="多重继承" tabindex="-1">多重继承 <a class="header-anchor" href="#多重继承" aria-label="Permalink to &quot;多重继承&quot;">​</a></h3>`,15)]))}const C=n(e,[["render",o]]);export{b as __pageData,C as default};
