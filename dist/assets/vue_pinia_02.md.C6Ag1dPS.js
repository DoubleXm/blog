import{_ as n,c as a,o as p,ag as l}from"./chunks/framework.BPQUDke-.js";const C=JSON.parse('{"title":"Pinia 核心及其 api 实现","description":"","frontmatter":{"outline":[2,3,4]},"headers":[],"relativePath":"vue/pinia/02.md","filePath":"vue/pinia/02.md","lastUpdated":1740476554000}'),e={name:"vue/pinia/02.md"};function o(r,s,c,t,E,i){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="pinia-核心及其-api-实现" tabindex="-1">Pinia 核心及其 api 实现 <a class="header-anchor" href="#pinia-核心及其-api-实现" aria-label="Permalink to &quot;Pinia 核心及其 api 实现&quot;">​</a></h1><p>新一代的 Vue 官方推荐的状态管理; 支持完成的 ts, 去除了 mutations, 只有 state, getters, actions 并且 actions 支持异步; 没有 store 的嵌套, store 之间可以自由使用;</p><p>对比 vuex</p><ul><li>天生支持 ts, vuex4 为了支持 vue3 迭代而来，适配度差一些;</li><li>vuex 遵循 <a href="https://www.ruanyifeng.com/blog/2016/01/flux.html" target="_blank" rel="noreferrer">flux 思想</a> <code>component -&gt; dispatch -&gt; commit</code>, pinia 直接使用 action 修改状态;</li><li>pinia 支持 setupApi, options 及 mapGetters 等函数为了适配 Vue2 才有的产物;</li><li>vuex 有 modules 概念, 数据结构为树状, 操作数据太长，还存在命名冲突问题; pinia 则是扁平化管理 store;</li></ul><h2 id="createpinia" tabindex="-1">createPinia <a class="header-anchor" href="#createpinia" aria-label="Permalink to &quot;createPinia&quot;">​</a></h2><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-5qOjE" id="tab-Y9wPcLV" checked><label data-title="createPinia.js" for="tab-Y9wPcLV">createPinia.js</label><input type="radio" name="group-5qOjE" id="tab-gFVHAVM"><label data-title="rootStore.js" for="tab-gFVHAVM">rootStore.js</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">piniaSymbol</span><span style="color:#E6E6E6;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;rootStore&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> createPinia</span><span style="color:#E6E6E6;">() {</span></span>
<span class="line"><span style="color:#6A9955;">  // 考虑到 $dispose 方法的实现, 需要使用 effectScope 管理所有的 state</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> scope</span><span style="color:#D4D4D4;"> =</span><span style="color:#DCDCAA;"> effectScope</span><span style="color:#E6E6E6;">(</span><span style="color:#569CD6;">true</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> scope</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#E6E6E6;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> ref</span><span style="color:#E6E6E6;">({}));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> pinia</span><span style="color:#D4D4D4;"> =</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">    install</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">app</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#6A9955;">      // 将 pinia 共享给所有的 store</span></span>
<span class="line"><span style="color:#9CDCFE;">      app</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">provide</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">piniaSymbol</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">    },</span></span>
<span class="line"><span style="color:#9CDCFE;">    _s:</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> Map</span><span style="color:#E6E6E6;">(), </span><span style="color:#6A9955;">// 用 map 数据结构存储所有的 store; id =&gt; store</span></span>
<span class="line"><span style="color:#9CDCFE;">    _e:</span><span style="color:#9CDCFE;"> scope</span><span style="color:#E6E6E6;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    state</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> pinia</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#9CDCFE;"> piniaSymbol</span><span style="color:#D4D4D4;"> =</span><span style="color:#DCDCAA;"> Symbol</span><span style="color:#E6E6E6;">(</span><span style="color:#CE9178;">&#39;pinia&#39;</span><span style="color:#E6E6E6;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div><h2 id="definestore" tabindex="-1">defineStore <a class="header-anchor" href="#definestore" aria-label="Permalink to &quot;defineStore&quot;">​</a></h2><p>确认 defineStore 的定义方式有三种，如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// 1. defineStore(id, options)</span></span>
<span class="line"><span style="color:#6A9955;">// 2. defineStore(id, setup)</span></span>
<span class="line"><span style="color:#6A9955;">// 3. defineStore(options)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>第二点需要确认，只有当用户在组件中使用 <code>useXxStore()</code> 时，<code>store</code> 中的数据才会被注入，所以 <code>defineStore</code> 应该返回一个函数。具体实现如下：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-xL1vl" id="tab-lXUiUI0" checked><label data-title="store.js" for="tab-lXUiUI0">store.js</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">piniaSymbol</span><span style="color:#E6E6E6;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;rootStore&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> defineStore</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">idOrOptions</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">setup</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> id</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> options</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // 判定用户的输入, 方便后续分开处理</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#E6E6E6;"> (</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> idOrOptions</span><span style="color:#D4D4D4;"> ===</span><span style="color:#CE9178;"> &#39;string&#39;</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">    id</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> idOrOptions</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">    options</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> setup</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">  } </span><span style="color:#C586C0;">else</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    id</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> idOrOptions</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">    options</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> idOrOptions</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> isSetupStore</span><span style="color:#D4D4D4;"> =</span><span style="color:#569CD6;"> typeof</span><span style="color:#9CDCFE;"> setup</span><span style="color:#D4D4D4;"> ===</span><span style="color:#CE9178;"> &#39;function&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  function</span><span style="color:#DCDCAA;"> useStore</span><span style="color:#E6E6E6;">() {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#9CDCFE;"> hasContext</span><span style="color:#D4D4D4;"> =</span><span style="color:#DCDCAA;"> getCurrentInstance</span><span style="color:#E6E6E6;">();</span></span>
<span class="line"><span style="color:#6A9955;">    // 当在 vue 组件中, 使用 useXxStore() 时, 就可以拿到整个 pinia 实例了</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#9CDCFE;"> pinia</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> hasContext</span><span style="color:#D4D4D4;"> &amp;&amp;</span><span style="color:#DCDCAA;"> inject</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">piniaSymbol</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    // 判定是否是否第一次 use</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#E6E6E6;"> (</span><span style="color:#D4D4D4;">!</span><span style="color:#9CDCFE;">pinia_s</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">has</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">)) {</span></span>
<span class="line"><span style="color:#6A9955;">      // 对两种编写方式分别处理</span></span>
<span class="line"><span style="color:#C586C0;">      if</span><span style="color:#E6E6E6;"> (</span><span style="color:#9CDCFE;">isSetupStore</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#DCDCAA;">        createSetupStore</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">options</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">      } </span><span style="color:#C586C0;">else</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">        createOptionsStore</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">setup</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">      }</span></span>
<span class="line"><span style="color:#E6E6E6;">    }</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#9CDCFE;"> srore</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> pinia</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">_s</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> store</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> useStore</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> createOptionsStore</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">options</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> createSupStore</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">setup</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">isOption</span><span style="color:#E6E6E6;">) {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div></div></div><h3 id="createoptionsstore" tabindex="-1">createOptionsStore <a class="header-anchor" href="#createoptionsstore" aria-label="Permalink to &quot;createOptionsStore&quot;">​</a></h3><p>对于 <code>options</code> 的处理，核心就是将其变更为 <code>setup</code> 函数，最终和 <code>setup</code> 方式的 <code>store</code> 放在一起进行下一步的处理。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-kL9Dl" id="tab-SkFfjT_" checked><label data-title="store.js" for="tab-SkFfjT_">store.js</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> createOptionsStore</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">options</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">state</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">getters</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">actions</span><span style="color:#E6E6E6;"> } </span><span style="color:#D4D4D4;">=</span><span style="color:#9CDCFE;"> options</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  function</span><span style="color:#DCDCAA;"> setup</span><span style="color:#E6E6E6;">() {</span></span>
<span class="line"><span style="color:#9CDCFE;">    pinia</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#E6E6E6;">[</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">] </span><span style="color:#D4D4D4;">=</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;"> ?</span><span style="color:#DCDCAA;"> state</span><span style="color:#E6E6E6;">() </span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> {};</span></span>
<span class="line"><span style="color:#6A9955;">    // 将 state 转换成 ref</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#9CDCFE;"> localState</span><span style="color:#D4D4D4;"> =</span><span style="color:#DCDCAA;"> toRefs</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#E6E6E6;">[</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">]);</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> Object</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">assign</span><span style="color:#E6E6E6;">(</span></span>
<span class="line"><span style="color:#9CDCFE;">      localState</span><span style="color:#E6E6E6;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">      actions</span><span style="color:#E6E6E6;">,</span></span>
<span class="line"><span style="color:#6A9955;">      // 将 getters 转换成计算属性</span></span>
<span class="line"><span style="color:#9CDCFE;">      Object</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">keys</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">getters</span><span style="color:#E6E6E6;">).</span><span style="color:#DCDCAA;">reduce</span><span style="color:#E6E6E6;">((</span><span style="color:#9CDCFE;">memo</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">computedName</span><span style="color:#E6E6E6;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">        memo</span><span style="color:#E6E6E6;">[</span><span style="color:#9CDCFE;">computedName</span><span style="color:#E6E6E6;">] </span><span style="color:#D4D4D4;">=</span><span style="color:#DCDCAA;"> computed</span><span style="color:#E6E6E6;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#569CD6;">          const</span><span style="color:#9CDCFE;"> store</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> pinia</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">_s</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#6A9955;">          // 调用 getters 方法方法</span></span>
<span class="line"><span style="color:#C586C0;">          return</span><span style="color:#9CDCFE;"> memo</span><span style="color:#E6E6E6;">[</span><span style="color:#9CDCFE;">computedName</span><span style="color:#E6E6E6;">].</span><span style="color:#DCDCAA;">call</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">store</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">        })</span></span>
<span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> memo</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">      }, {})</span></span>
<span class="line"><span style="color:#E6E6E6;">    )</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#DCDCAA;"> createSetupStore</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">setup</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">, </span><span style="color:#569CD6;">true</span><span style="color:#E6E6E6;">)</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div></div></div><h3 id="createsetupstore" tabindex="-1">createSetupStore <a class="header-anchor" href="#createsetupstore" aria-label="Permalink to &quot;createSetupStore&quot;">​</a></h3><p><code>setupStore</code> 核心只做两件事，维护自己的 <code>store</code>，维护用户的 <code>store</code>，最终合并然后返回。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-l3Dh3" id="tab-CYUwh4z" checked><label data-title="store.js" for="tab-CYUwh4z">store.js</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// 官方并没有提供此方法, 自己实现</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> isComputed</span><span style="color:#D4D4D4;"> =</span><span style="color:#E6E6E6;"> (</span><span style="color:#9CDCFE;">v</span><span style="color:#E6E6E6;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> isRef</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">v</span><span style="color:#E6E6E6;">) </span><span style="color:#D4D4D4;">&amp;&amp;</span><span style="color:#9CDCFE;"> v</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">effect</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> createSetupStore</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">setup</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">isOption</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  function</span><span style="color:#DCDCAA;"> wrapActions</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">action</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#E6E6E6;"> (</span><span style="color:#D4D4D4;">...</span><span style="color:#9CDCFE;">args</span><span style="color:#E6E6E6;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#569CD6;">      let</span><span style="color:#9CDCFE;"> ret</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#C586C0;">      try</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">        ret</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> action</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">apply</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">store</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">args</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">      } </span><span style="color:#C586C0;">catch</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#6A9955;">        // TODO: 错误处理</span></span>
<span class="line"><span style="color:#E6E6E6;">      }</span></span>
<span class="line"><span style="color:#6A9955;">      // action 是 promise 也需要处理</span></span>
<span class="line"><span style="color:#C586C0;">      if</span><span style="color:#E6E6E6;"> (</span><span style="color:#9CDCFE;">ret</span><span style="color:#569CD6;"> instanceof</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">        ret</span></span>
<span class="line"><span style="color:#E6E6E6;">          .</span><span style="color:#DCDCAA;">resolve</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#C586C0;">            return</span><span style="color:#9CDCFE;"> value</span></span>
<span class="line"><span style="color:#E6E6E6;">          })</span></span>
<span class="line"><span style="color:#E6E6E6;">          .</span><span style="color:#DCDCAA;">catch</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">err</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#6A9955;">            // TODO: 错误处理</span></span>
<span class="line"><span style="color:#E6E6E6;">          });</span></span>
<span class="line"><span style="color:#E6E6E6;">      }</span></span>
<span class="line"><span style="color:#C586C0;">      return</span><span style="color:#9CDCFE;"> ret</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">    }</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> scope</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#6A9955;">  // 非用户 store 存储 $ 系列方法</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> store</span><span style="color:#D4D4D4;"> =</span><span style="color:#DCDCAA;"> reactive</span><span style="color:#E6E6E6;">({});</span></span>
<span class="line"><span style="color:#6A9955;">  // 用户的 store 开辟一个作用域空间，方便后面 dispose</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> setupStore</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> pinia</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">_e</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#E6E6E6;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    scope</span><span style="color:#D4D4D4;"> =</span><span style="color:#DCDCAA;"> effectScope</span><span style="color:#E6E6E6;">();</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> scope</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#E6E6E6;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> setup</span><span style="color:#E6E6E6;">());</span></span>
<span class="line"><span style="color:#E6E6E6;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // setupApi 的时候 pinia.state.value[id] 是不存在的, 设置一个默认值</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> initialState</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> pinia</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#E6E6E6;">[</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">];</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#E6E6E6;"> (</span><span style="color:#D4D4D4;">!</span><span style="color:#9CDCFE;">initialState</span><span style="color:#D4D4D4;"> &amp;&amp;</span><span style="color:#D4D4D4;"> !</span><span style="color:#9CDCFE;">isOption</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">    pinia</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#E6E6E6;">[</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">] </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> {};</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // 对用户 store 中的属性处理</span></span>
<span class="line"><span style="color:#C586C0;">  for</span><span style="color:#E6E6E6;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> key</span><span style="color:#569CD6;"> in</span><span style="color:#9CDCFE;"> setupStore</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#9CDCFE;"> prop</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> setupStore</span><span style="color:#E6E6E6;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#E6E6E6;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#E6E6E6;"> (</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> prop</span><span style="color:#D4D4D4;"> ===</span><span style="color:#CE9178;"> &#39;function&#39;</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#6A9955;">      // 针对方法的处理</span></span>
<span class="line"><span style="color:#9CDCFE;">      setupStore</span><span style="color:#E6E6E6;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#E6E6E6;">] </span><span style="color:#D4D4D4;">=</span><span style="color:#DCDCAA;"> wrapActions</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">prop</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">setupStore</span><span style="color:#E6E6E6;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#E6E6E6;">]);</span></span>
<span class="line"><span style="color:#E6E6E6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    // 给 pinia.state.value[id] 设置值</span></span>
<span class="line"><span style="color:#6A9955;">    // computed 不属于 state 的范畴，需要过滤掉</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#E6E6E6;"> ((</span><span style="color:#DCDCAA;">isRef</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">prop</span><span style="color:#E6E6E6;">) </span><span style="color:#D4D4D4;">&amp;&amp;</span><span style="color:#D4D4D4;"> !</span><span style="color:#DCDCAA;">isComputed</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">prop</span><span style="color:#E6E6E6;">)) </span><span style="color:#D4D4D4;">||</span><span style="color:#DCDCAA;"> isReactive</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">prop</span><span style="color:#E6E6E6;">)) {</span></span>
<span class="line"><span style="color:#9CDCFE;">      pinia</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#E6E6E6;">[</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">][</span><span style="color:#9CDCFE;">key</span><span style="color:#E6E6E6;">] </span><span style="color:#D4D4D4;">=</span><span style="color:#9CDCFE;"> prop</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">    }</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // 设置映射, 合并对象, 返回</span></span>
<span class="line"><span style="color:#9CDCFE;">  pinia</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">_s</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">set</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">  Object</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">assign</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">store</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">setupStore</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> store</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div></div></div><h2 id="api-实现" tabindex="-1">API 实现 <a class="header-anchor" href="#api-实现" aria-label="Permalink to &quot;API 实现&quot;">​</a></h2><p>至此一个最简版的 pinia 已经实现，后面开始实现内置的各种 api。</p><h3 id="patch" tabindex="-1">$patch <a class="header-anchor" href="#patch" aria-label="Permalink to &quot;$patch&quot;">​</a></h3><p><code>$patch</code> 批量更新状态, 同一时间更改多个属性；在 timeline 中也不会出现多余的操作（虽然 vue3 现在并没有体现）。</p><p>核心原理就是, 如果是对象就与 <code>pinia.state.value[id]</code> 合并；如果是方法，将调用此方法把 <code>pinia.state.value[id]</code> 当做参数传递进去。</p><p>使用方法示例如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">store</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">$patch</span><span style="color:#E6E6E6;">({ </span><span style="color:#9CDCFE;">count:</span><span style="color:#B5CEA8;"> 1000</span><span style="color:#E6E6E6;"> });</span></span>
<span class="line"><span style="color:#9CDCFE;">store</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">$patch</span><span style="color:#E6E6E6;">((</span><span style="color:#9CDCFE;">state</span><span style="color:#E6E6E6;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">  state</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> +=</span><span style="color:#B5CEA8;"> 100</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在 <code>createSetupStore</code> 中声明了 <code>store</code> (非用户), <code>setupStore</code> (用户)。这些内部的 <code>api</code> 就统统放在非用户 <code>store</code>。改写此方法如下：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-zjftb" id="tab-FaVxwOW" checked><label data-title="store.js" for="tab-FaVxwOW">store.js</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> isObject</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> v</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#569CD6;"> typeof</span><span style="color:#9CDCFE;"> v</span><span style="color:#D4D4D4;"> ===</span><span style="color:#CE9178;"> &#39;object&#39;</span><span style="color:#D4D4D4;"> &amp;&amp;</span><span style="color:#9CDCFE;"> v</span><span style="color:#D4D4D4;"> !==</span><span style="color:#569CD6;"> null</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> mergeReactiveObject</span><span style="color:#D4D4D4;"> =</span><span style="color:#E6E6E6;"> (</span><span style="color:#9CDCFE;">target</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">patchToApply</span><span style="color:#E6E6E6;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#C586C0;">  for</span><span style="color:#E6E6E6;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> key</span><span style="color:#569CD6;"> in</span><span style="color:#9CDCFE;"> target</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#9CDCFE;"> oldValue</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> target</span><span style="color:#E6E6E6;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#E6E6E6;">];</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#9CDCFE;"> newValue</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> patchToApply</span><span style="color:#E6E6E6;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#E6E6E6;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#E6E6E6;"> (</span><span style="color:#DCDCAA;">isObject</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">oldValue</span><span style="color:#E6E6E6;">) </span><span style="color:#D4D4D4;">&amp;&amp;</span><span style="color:#DCDCAA;"> isObject</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">newValue</span><span style="color:#E6E6E6;">)) {</span></span>
<span class="line"><span style="color:#DCDCAA;">      mergeReactiveObject</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">oldValue</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">newValue</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">    } </span><span style="color:#C586C0;">else</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#6A9955;">      // target[key] 会丢失响应式</span></span>
<span class="line"><span style="color:#9CDCFE;">      target</span><span style="color:#E6E6E6;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#E6E6E6;">] </span><span style="color:#D4D4D4;">=</span><span style="color:#DCDCAA;"> toRef</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">newValue</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">    }</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> createSetupStore</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">setup</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">isOption</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  function</span><span style="color:#DCDCAA;"> $patch</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">partialStateOrMutatior</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#E6E6E6;"> (</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> partialStateOrMutatior</span><span style="color:#D4D4D4;"> ===</span><span style="color:#CE9178;"> &#39;function&#39;</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#DCDCAA;">      partialStateOrMutatior</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#E6E6E6;">[</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">]);</span></span>
<span class="line"><span style="color:#E6E6E6;">    } </span><span style="color:#C586C0;">else</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">      mergeReactiveObject</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#E6E6E6;">[</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">], </span><span style="color:#9CDCFE;">partialStateOrMutatior</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">    }</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> partialStore</span><span style="color:#D4D4D4;"> =</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    $patch</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> store</span><span style="color:#D4D4D4;"> =</span><span style="color:#DCDCAA;"> reactive</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">partialStore</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#6A9955;">  // ... ...</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div></div></div><h3 id="reset" tabindex="-1">$reset <a class="header-anchor" href="#reset" aria-label="Permalink to &quot;$reset&quot;">​</a></h3><p>该方法仅支持 <code>optionsApi</code>, 因为在 <code>setupApi</code> 中状态是完全可控的, 完全可以靠用户编写 <code>reset</code> 方法。</p><p>核心原理就是, 利用 <code>$patch</code> (回调中的 <code>state</code>) 和用户的 <code>state</code> 合并。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-1S9r5" id="tab-b8k_W1A" checked><label data-title="store.js" for="tab-b8k_W1A">store.js</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> createOptionsStore</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">options</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#6A9955;">  // ... ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> store</span><span style="color:#D4D4D4;"> =</span><span style="color:#DCDCAA;"> createSetupStore</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">setup</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">, </span><span style="color:#569CD6;">true</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">  store</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">$reset</span><span style="color:#D4D4D4;"> =</span><span style="color:#569CD6;"> function</span><span style="color:#E6E6E6;"> () {</span></span>
<span class="line"><span style="color:#6A9955;">    // newState 原始值</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#9CDCFE;"> newState</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> state</span><span style="color:#D4D4D4;"> ?</span><span style="color:#DCDCAA;"> state</span><span style="color:#E6E6E6;">() </span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> {};</span></span>
<span class="line"><span style="color:#9CDCFE;">    store</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">$patch</span><span style="color:#E6E6E6;">((</span><span style="color:#9CDCFE;">$state</span><span style="color:#E6E6E6;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      Object</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">assign</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">$state</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">newState</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">    });</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> store</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></div></div><h3 id="subscribe" tabindex="-1">$subscribe <a class="header-anchor" href="#subscribe" aria-label="Permalink to &quot;$subscribe&quot;">​</a></h3><p>订阅 <code>state</code> 中的变化，并且触发，与 <code>watch</code> 一个 <code>state</code> 的区别就是，在 <code>patch</code> 后该订阅只会触发一次; 底层实际也是 <code>watch</code> 实现。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-lqTOk" id="tab-OjE7hEN" checked><label data-title="store.js" for="tab-OjE7hEN">store.js</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> createSetupStore</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">setup</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">isOption</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  function</span><span style="color:#DCDCAA;"> $subscribe</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">callback</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">options</span><span style="color:#D4D4D4;"> =</span><span style="color:#E6E6E6;"> {}) {</span></span>
<span class="line"><span style="color:#6A9955;">    // watch 也用作用域包裹</span></span>
<span class="line"><span style="color:#9CDCFE;">    scope</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#E6E6E6;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">      watch</span><span style="color:#E6E6E6;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> pinia</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#E6E6E6;">[</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">], (</span><span style="color:#9CDCFE;">state</span><span style="color:#E6E6E6;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">        callback</span><span style="color:#E6E6E6;">({ </span><span style="color:#9CDCFE;">storeId:</span><span style="color:#9CDCFE;"> id</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">state</span><span style="color:#E6E6E6;"> });</span></span>
<span class="line"><span style="color:#E6E6E6;">      }, { </span><span style="color:#9CDCFE;">deep:</span><span style="color:#569CD6;"> true</span><span style="color:#E6E6E6;"> });</span></span>
<span class="line"><span style="color:#E6E6E6;">    });</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> scope</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> partialStore</span><span style="color:#D4D4D4;"> =</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    $subscribe</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> store</span><span style="color:#D4D4D4;"> =</span><span style="color:#DCDCAA;"> reactive</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">partialStore</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#6A9955;">  // ... ...</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></div></div><h3 id="onaction" tabindex="-1">$onAction <a class="header-anchor" href="#onaction" aria-label="Permalink to &quot;$onAction&quot;">​</a></h3><p><a href="https://pinia.vuejs.org/zh/core-concepts/actions.html#subscribing-to-actions" target="_blank" rel="noreferrer">文档</a> 监听 <code>action</code> 和它的调用，接受一个回调，会在 <code>action</code> 调用之前被执行，回调中可以 <code>after</code>, <code>onError</code> 钩子及 <code>actionName</code>, <code>store</code> (当前的实例), <code>args</code> (传递给 action 的参数)。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-Q0t0b" id="tab-nlKuH14" checked><label data-title="store.js" for="tab-nlKuH14">store.js</label><input type="radio" name="group-Q0t0b" id="tab-Oba7ZPN"><label data-title="subscriptions.js" for="tab-Oba7ZPN">subscriptions.js</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">triggerSubscription</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">addSubscription</span><span style="color:#E6E6E6;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./subscriptions&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> createSetupStore</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">setup</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">isOption</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#6A9955;">  // 重写 wrapAction 方法</span></span>
<span class="line"><span style="color:#569CD6;">  function</span><span style="color:#DCDCAA;"> wrapAction</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">action</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#E6E6E6;"> (</span><span style="color:#D4D4D4;">...</span><span style="color:#9CDCFE;">args</span><span style="color:#E6E6E6;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#569CD6;">      const</span><span style="color:#9CDCFE;"> afterCallbacks</span><span style="color:#D4D4D4;"> =</span><span style="color:#E6E6E6;"> [];</span></span>
<span class="line"><span style="color:#569CD6;">      const</span><span style="color:#9CDCFE;"> errorCallbacks</span><span style="color:#D4D4D4;"> =</span><span style="color:#E6E6E6;"> [];</span></span>
<span class="line"><span style="color:#569CD6;">      const</span><span style="color:#DCDCAA;"> after</span><span style="color:#D4D4D4;"> =</span><span style="color:#E6E6E6;"> (</span><span style="color:#9CDCFE;">cb</span><span style="color:#E6E6E6;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> afterCallbacks</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">cb</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#569CD6;">      const</span><span style="color:#DCDCAA;"> onError</span><span style="color:#D4D4D4;"> =</span><span style="color:#E6E6E6;"> (</span><span style="color:#9CDCFE;">cb</span><span style="color:#E6E6E6;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> errorCallbacks</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">cb</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">      // 接收的回调函数</span></span>
<span class="line"><span style="color:#DCDCAA;">      triggerSubscription</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">subscriptions</span><span style="color:#E6E6E6;">, { </span><span style="color:#9CDCFE;">name</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">store</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">args</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">after</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">onError</span><span style="color:#E6E6E6;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">      let</span><span style="color:#9CDCFE;"> ret</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#C586C0;">      try</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">        ret</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> action</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">apply</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">store</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">args</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">      } </span><span style="color:#C586C0;">catch</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#DCDCAA;">        triggerSubscription</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">errorCallbacks</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">e</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">      if</span><span style="color:#E6E6E6;"> (</span><span style="color:#9CDCFE;">ret</span><span style="color:#569CD6;"> instanceof</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">        ret</span></span>
<span class="line"><span style="color:#E6E6E6;">          .</span><span style="color:#DCDCAA;">resolve</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">            triggerSubscriptions</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">afterCallbacks</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">res</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#C586C0;">            return</span><span style="color:#9CDCFE;"> value</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">          })</span></span>
<span class="line"><span style="color:#E6E6E6;">          .</span><span style="color:#DCDCAA;">catch</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">            triggerSubscription</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">errorCallbacks</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">e</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">          });</span></span>
<span class="line"><span style="color:#E6E6E6;">      }</span></span>
<span class="line"><span style="color:#DCDCAA;">      triggerSubscriptions</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">afterCallbackList</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">ret</span><span style="color:#E6E6E6;">)</span></span>
<span class="line"><span style="color:#C586C0;">      return</span><span style="color:#9CDCFE;"> ret</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">    }</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> subscriptions</span><span style="color:#D4D4D4;"> =</span><span style="color:#E6E6E6;"> [];</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> partialState</span><span style="color:#D4D4D4;"> =</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#6A9955;">    // 绑定订阅函数</span></span>
<span class="line"><span style="color:#9CDCFE;">    $onAction:</span><span style="color:#9CDCFE;"> addSubscription</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">bind</span><span style="color:#E6E6E6;">(</span><span style="color:#569CD6;">null</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">subscriptions</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> store</span><span style="color:#D4D4D4;"> =</span><span style="color:#DCDCAA;"> reactive</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">partialStore</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#6A9955;">  // ... ...</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> addSubscription</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">subscriptions</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">callback</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">  subscriptions</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">callback</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> triggerSubscription</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">subscriptions</span><span style="color:#E6E6E6;">, </span><span style="color:#D4D4D4;">...</span><span style="color:#9CDCFE;">args</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">  subscriptions</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">callback</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#DCDCAA;"> callback</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">args</span><span style="color:#E6E6E6;">));</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></div></div><h3 id="dispose" tabindex="-1">$dispose <a class="header-anchor" href="#dispose" aria-label="Permalink to &quot;$dispose&quot;">​</a></h3><p>停止当前 <code>store</code> 的作用域，核心就用 <code>scope.stop()</code> 停止响应式, 从 <code>_s</code> 中删除映射并且清空 <code>$onAction</code> 的订阅。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-DNQZ7" id="tab-OtKwq8x" checked><label data-title="store.js" for="tab-OtKwq8x">store.js</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> createSetupStore</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">setup</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">isOption</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> partialStore</span><span style="color:#D4D4D4;"> =</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">    $dispose</span><span style="color:#E6E6E6;">() {</span></span>
<span class="line"><span style="color:#9CDCFE;">      scope</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">stop</span><span style="color:#E6E6E6;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">      pinia</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">_s</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">delete</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">      actionSubscriptions</span><span style="color:#D4D4D4;"> =</span><span style="color:#E6E6E6;"> [];</span></span>
<span class="line"><span style="color:#E6E6E6;">    }</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> store</span><span style="color:#D4D4D4;"> =</span><span style="color:#DCDCAA;"> reactive</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">partialStore</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#6A9955;">  // ... ...</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></div></div><h3 id="state" tabindex="-1">$state <a class="header-anchor" href="#state" aria-label="Permalink to &quot;$state&quot;">​</a></h3><p>挂在 <code>store</code> 上面的一个属性，可以直接替换 <code>store</code> 上面的 <code>state</code> 并且不会丢失其响应式。核心使用 <code>Object.defineProperty</code> 代理 <code>store</code> 实现</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-GA4nf" id="tab-R-cOuB2" checked><label data-title="store.js" for="tab-R-cOuB2">store.js</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> createSetupStore</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">setup</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">isOption</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#6A9955;">  // ... ...</span></span>
<span class="line"><span style="color:#9CDCFE;">  Object</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">defineProperty</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">store</span><span style="color:#E6E6E6;">, </span><span style="color:#CE9178;">&#39;$state&#39;</span><span style="color:#E6E6E6;">, {</span></span>
<span class="line"><span style="color:#DCDCAA;">    get</span><span style="color:#9CDCFE;">:</span><span style="color:#E6E6E6;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> pinia</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">state</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#E6E6E6;">[</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">],</span></span>
<span class="line"><span style="color:#DCDCAA;">    set</span><span style="color:#9CDCFE;">:</span><span style="color:#E6E6E6;"> (</span><span style="color:#9CDCFE;">state</span><span style="color:#E6E6E6;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      store</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">$patch</span><span style="color:#E6E6E6;">((</span><span style="color:#9CDCFE;">$state</span><span style="color:#E6E6E6;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">        Object</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">assign</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">$state</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">state</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">      })</span></span>
<span class="line"><span style="color:#E6E6E6;">    }</span></span>
<span class="line"><span style="color:#E6E6E6;">  })</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></div></div><h3 id="use" tabindex="-1">use <a class="header-anchor" href="#use" aria-label="Permalink to &quot;use&quot;">​</a></h3><p>插件即是一个函数，它的返回值最终会和 <code>store</code> 合并; 调用的次数，取决于项目中存在多少个 <code>store</code>; <a href="https://pinia.vuejs.org/zh/core-concepts/plugins.html#introduction" target="_blank" rel="noreferrer">文档</a> 以实现最简版持久化存储为例如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> localPlugin</span><span style="color:#E6E6E6;">({ </span><span style="color:#9CDCFE;">store</span><span style="color:#E6E6E6;"> }) {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> local</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> window</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">localStorage</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">getItem</span><span style="color:#E6E6E6;">(</span><span style="color:#CE9178;">\`</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">store</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">$id</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">-pinia\`</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#E6E6E6;"> (</span><span style="color:#9CDCFE;">local</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">    store</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">$state</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> JSON</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">parse</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">local</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">  store</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">$subscribe</span><span style="color:#E6E6E6;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    window</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">localStorage</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">setItem</span><span style="color:#E6E6E6;">(</span><span style="color:#CE9178;">\`</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">store</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">$id</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">JSON</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">stringify</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">store</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">$state</span><span style="color:#E6E6E6;">));</span></span>
<span class="line"><span style="color:#E6E6E6;">  });</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#9CDCFE;"> pinia</span><span style="color:#D4D4D4;"> =</span><span style="color:#DCDCAA;"> createPinia</span><span style="color:#E6E6E6;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">use</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">localPlugin</span><span style="color:#E6E6E6;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>核心就是执行用户传递进来的方法，将 <code>store</code> 和 <code>pinia</code> 传递给这个方法并且将用户传递进来的方法的返回值合并到 <code>store</code>（非用户）</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-fFIFG" id="tab-KcunZjv" checked><label data-title="createPinia.js" for="tab-KcunZjv">createPinia.js</label><input type="radio" name="group-fFIFG" id="tab-4EwzRiK"><label data-title="store.js" for="tab-4EwzRiK">store.js</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> createPinia</span><span style="color:#E6E6E6;">() {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> pinia</span><span style="color:#D4D4D4;"> =</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#6A9955;">    // ... ...</span></span>
<span class="line"><span style="color:#9CDCFE;">    _p:</span><span style="color:#E6E6E6;"> [],</span></span>
<span class="line"><span style="color:#DCDCAA;">    use</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">plugin</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#569CD6;">      this</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">_p</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">plugin</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#6A9955;">      // 链式调用</span></span>
<span class="line"><span style="color:#C586C0;">      return</span><span style="color:#569CD6;"> this</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">    }</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> pinia</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> createSetupStore</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">setup</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">isOption</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#6A9955;">  // ... ...</span></span>
<span class="line"><span style="color:#9CDCFE;">  pinia</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">_p</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#E6E6E6;">((</span><span style="color:#9CDCFE;">plugin</span><span style="color:#E6E6E6;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#9CDCFE;"> extender</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> scope</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#E6E6E6;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> plugin</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">store</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">));</span></span>
<span class="line"><span style="color:#9CDCFE;">    store</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">$patch</span><span style="color:#E6E6E6;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      Object</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">assign</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">store</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">extender</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">    });</span></span>
<span class="line"><span style="color:#E6E6E6;">  })</span></span>
<span class="line"><span style="color:#6A9955;">  // ... ...</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div></div><h2 id="非-vue-文件中的调用" tabindex="-1">非 vue 文件中的调用 <a class="header-anchor" href="#非-vue-文件中的调用" aria-label="Permalink to &quot;非 vue 文件中的调用&quot;">​</a></h2><p>在 <code>install</code> 的时候，组件是通过 <code>provide</code> 注入的，但是这种方式是不支持在非 <code>vue</code> 文件中使用的; 而这种场景也是一定会存在的，比如你在 <code>router</code> 的钩子中去做鉴权等等... 此时可以将 <code>pinia</code> 放在全局中，就不用考虑拿不到的问题了；</p><p>解决思路就是在全局维护一个 <code>pinia</code>，当用户 <code>install</code> 或者 <code>useStore</code> 的时候，去更新这个 <code>pinia</code></p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-Tg3uP" id="tab-g3pIgid" checked><label data-title="rootStore.js" for="tab-g3pIgid">rootStore.js</label><input type="radio" name="group-Tg3uP" id="tab-M7roHyi"><label data-title="createPinia.js" for="tab-M7roHyi">createPinia.js</label><input type="radio" name="group-Tg3uP" id="tab-PwhdbZU"><label data-title="store.js" for="tab-PwhdbZU">store.js</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// 全局 pinia</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> let</span><span style="color:#9CDCFE;"> activePinia</span><span style="color:#D4D4D4;"> =</span><span style="color:#569CD6;"> null</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> const</span><span style="color:#DCDCAA;"> setActivePinia</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> pinia</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> activePinia</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> pinia</span><span style="color:#E6E6E6;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">setActivePinia</span><span style="color:#E6E6E6;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./rootStore&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> createPinia</span><span style="color:#E6E6E6;">() {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> pinia</span><span style="color:#D4D4D4;"> =</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">    install</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">app</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#DCDCAA;">      setActivePinia</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">      app</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">provide</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">piniaSymbol</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">    },</span></span>
<span class="line"><span style="color:#6A9955;">    // ... ...</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> pinia</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">activePinia</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">setActivePinia</span><span style="color:#E6E6E6;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./rootStore&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> defineStore</span><span style="color:#E6E6E6;">() {</span></span>
<span class="line"><span style="color:#6A9955;">  // ... ...</span></span>
<span class="line"><span style="color:#569CD6;">  function</span><span style="color:#DCDCAA;"> useStore</span><span style="color:#E6E6E6;">() {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#9CDCFE;"> hasContext</span><span style="color:#D4D4D4;"> =</span><span style="color:#DCDCAA;"> getCurrentInstance</span><span style="color:#E6E6E6;">();</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> pinia</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> hasContext</span><span style="color:#D4D4D4;"> &amp;&amp;</span><span style="color:#DCDCAA;"> inject</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">piniaSymbol</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#6A9955;">    // 如果注入成功, 就设置一下全局的 pinia</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#E6E6E6;"> (</span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">) </span><span style="color:#DCDCAA;">setActivePinia</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">pinia</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#6A9955;">    // 无论成功该 pinia 都会和全局实例保持一致</span></span>
<span class="line"><span style="color:#9CDCFE;">    pinia</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> activePinia</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#6A9955;">    // ... ...</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> useStore</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></div></div><h2 id="storetorefs" tabindex="-1">storeToRefs <a class="header-anchor" href="#storetorefs" aria-label="Permalink to &quot;storeToRefs&quot;">​</a></h2><p>该方法与 <code>toRefs</code> 的最大区别就是，会将方法给过滤掉，并不会把 <code>store</code> 中所有解构出来的值都变成 <code>ref</code>;</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki slack-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> storeToRefs</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">store</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#6A9955;">  // store 是个 reactive 不能直接循环, 会触发 getter</span></span>
<span class="line"><span style="color:#9CDCFE;">  store</span><span style="color:#D4D4D4;"> =</span><span style="color:#DCDCAA;"> toRaw</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">store</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#9CDCFE;"> refs</span><span style="color:#D4D4D4;"> =</span><span style="color:#E6E6E6;"> {};</span></span>
<span class="line"><span style="color:#C586C0;">  for</span><span style="color:#E6E6E6;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> key</span><span style="color:#569CD6;"> in</span><span style="color:#9CDCFE;"> store</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#9CDCFE;"> value</span><span style="color:#D4D4D4;"> =</span><span style="color:#9CDCFE;"> stroe</span><span style="color:#E6E6E6;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#E6E6E6;">];</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#E6E6E6;"> (</span><span style="color:#DCDCAA;">isRef</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#E6E6E6;">) </span><span style="color:#D4D4D4;">||</span><span style="color:#DCDCAA;"> isReactive</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#E6E6E6;">)) {</span></span>
<span class="line"><span style="color:#6A9955;">      // 将 store 中被结构的值修改为 ref</span></span>
<span class="line"><span style="color:#9CDCFE;">      refs</span><span style="color:#E6E6E6;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#E6E6E6;">] </span><span style="color:#D4D4D4;">=</span><span style="color:#DCDCAA;"> toRef</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">store</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#E6E6E6;">)</span></span>
<span class="line"><span style="color:#E6E6E6;">    }</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> refs</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,54)]))}const D=n(e,[["render",o]]);export{C as __pageData,D as default};
